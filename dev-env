#!/usr/bin/env bash
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"

detect_shell() {
    echo "Detecting shell..."
    if [ -n "$ZSH_VERSION" ]; then
        shell="zsh"
    elif [ -n "$BASH_VERSION" ]; then
        shell="bash"
    else
        echo "Unsupported shell. Please use bash or zsh."
        exit 1
    fi
    echo "Detected shell: $shell"
}

install_package() {
    PACKAGE_NAME=$1
    if ! command -v $PACKAGE_NAME; then
        echo "$PACKAGE_NAME not installed: installing $PACKAGE_NAME"
    else
        echo "$PACKAGE_NAME is already installed."
        return
    fi
    if command -v apt-get; then
        sudo apt-get update
        sudo apt-get install -y $PACKAGE_NAME
    elif command -v pacman; then
        sudo pacman -Syu $PACKAGE_NAME
    else
        echo "No supported package manager found. Install $PACKAGE_NAME manually."
        exit 1
    fi
}

ensure_git_installed() {
    echo "Checking for git installation..."
    if ! command -v git; then
        echo "git not installed: installing git"
        install_package git
    fi
    echo "git is installed."
}

ensure_repo_cloned() {
    echo "Checking if inside dev-env repository..."
    if ! grep -q "f3bbd53a6dac5aa71fdad71cad50bc1db0b2409d394a5206a4933d6f8c34bd06" .dev-env-hash; then
        echo "dev-env not found: cloning repo"
        mkdir dev-env-stage
        cd dev-env-stage
        git clone https://github.com/wellatleastitried/dev-env.git || echo "Failed to clone dev-env from Github..." && exit 1
        cp -r ./dev-env/* .
        DEV_ENV_PATH=$(pwd)
        if ! grep -q "PATH_DEV_ENV" ~/.bashrc; then
            echo "export PATH_DEV_ENV=$DEV_ENV_PATH" >> ~/.bashrc
        fi
        PACKAGE_FILE=./package_list.txt
        if [ ! -f $PACKAGE_FILE ]; then
            echo "Package list file not found, what the fuck just happened."
            exit 1
        else
            for package in $(cat $PACKAGE_FILE); do
                install_package $package
            done
        fi
    else
        DEV_ENV_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"
    fi
    echo "Inside dev-env repository."
}

check_for_changes() {
    cd $DEV_ENV_PATH
    if git status | grep -q "nothing to commit"; then
        echo "No changes, proceeding with update..."
    else
        read -p "There are changes to your configs, would you like to commit/push these changes to vc? (Y/n)" resp
        if [[ ! $resp =~ ^[Yy]$ ]]; then
            echo "bang"
        else
            git add .
            git commit -m "New updates to configs"
            git push
        fi
    fi
}

renew_nvim_config() {
    if [ -d ~/.config/nvim ]; then
        echo "Renewing nvim config"
        rm -rf ~/.config/nvim
    fi
    mkdir -p ~/.config
    cp -r "$DEV_ENV_PATH/config/nvim" ~/.config/
    echo "nvim config renewed."
}

renew_configs() {
    renew_nvim_config
}

update_configs() {
    detect_shell
    ensure_git_installed
    ensure_repo_cloned
    check_for_changes
    # renew_configs
}

add_alias() {
    detect_shell
    read -p "Enter alias name: " alias_name
    read -p "Enter command for alias '$alias_name': " alias_command
    echo "alias $alias_name='$alias_command'" >> "$HOME/.$(echo $shell)rc"
    echo "Alias '$alias_name' added to $HOME/.$(echo $shell)rc"
}

add_path() {
    detect_shell
    read -p "Enter the path to add to PATH: " new_path
    echo "export PATH=\"\$PATH:$new_path\"" >> "$HOME/.$(echo $shell)rc"
    echo "Path '$new_path' added to PATH in $HOME/.$(echo $shell)rc"
}

add_custom_line() {
    detect_shell
    echo "Make sure this is valid bash, it is just being appended to your rc file."
    read -p "Enter the custom line to add to your shell configuration: " custom_line
    echo "$custom_line" >> "$HOME/.$(echo $shell)rc"
    echo "Custom line added to $HOME/.$(echo $shell)rc"
}

show_help() {
    echo "Usage: $0 command"
    echo "Commands:"
    echo "  update    Update the development environment configurations"
    echo "  help      Show this help message. CAN ALSO BE USED AS: '[command] help' for more info on a specific command"
    echo "  add       choose what to add to env (alias, PATH, custom line to .bashrc)"
}

if [ -z "$1" ] || [ "$1" == "update" ]; then
    update_configs
elif [ -z "$2" ]; then
    if [ "$1" == "help" ]; then
        show_help
    elif [ "$1" == "add" ]; then
        select choice in "Alias" "PATH" "Custom" "Exit"; do
            case $choice in
                Alias ) add_alias; break;;
                PATH ) add_path; break;;
                Custom ) add_custom_line; break;;
                Exit ) echo "Exiting..."; exit 0;;
            esac
        done
    fi
elif [ -z "$3" ]; then
    if [ "$1" == "help" ]; then
        if [ "$2" == "help" ]; then
            echo "$0 help hypr: Shows syntax to modify hyprland keybinds."
            echo "$0 help i3: Shows syntax to modify i3wm keybinds."
            echo "$0 help vim: Shows how to exit vim :)"
        elif [ "$2" == "hypr" ]; then
            echo "Find your config file. Likely in ~/.config/hypr/hyprland.conf"
            echo "  Unbind the existing keybind if it is already set using: unbind = SUPER, left"
            echo "  Set a new keybind using (example): bindd = SUPER, H, Move focus left, movefocus, l"
        elif [ "$2" == "i3" ]; then
            echo "Find your config file. Likely in ~/.config/i3/config"
            echo "  Set a new keybind using (example): bindsym $mod+H focus left"
        elif [ "$2" == "vim" ]; then
            echo "How to exit vim/nvim:"
            echo "  Wait holy shit I completely forgot..."
        else
            show_help
        fi
    elif [ "$1" == "add" ]; then
        if [ "$2" == "help" ]; then
            echo "Usage: $0 add [alias|path|custom]"
            echo "  alias  - Add a new alias to your shell configuration"
            echo "  path   - Add a new path to your PATH environment variable"
            echo "  custom - Add a custom line to your shell configuration"
        elif [ "$2" == "alias" ]; then
            add_alias
        elif [ "$2" == "path" ]; then
            add_path
        elif [ "$2" == "custom" ]; then
            add_custom_line
        else
            show_help
        fi
    else
        show_help
    fi
else
    show_help
fi

