#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'
check_for_updates() {
    echo "Checking for updates..."
    if git fetch --dry-run 2>/dev/null; then
        if [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]; then
            echo "Updates available. Pulling latest changes..."
            git pull
        else
            echo "No updates available."
        fi
    else
        echo "${RED}Error checking for updates. Ensure you are in a git repository.${NC}"
        exit 1
    fi
}
detect_shell() {
    echo "Detecting shell..."
    if [ -z "$ZSH_VERSION" ]; then
        shell="zsh"
    elif [ -z "$BASH_VERSION" ]; then
        shell="bash"
    else
        echo -e "${RED}Unsupported shell. You need either bash or zsh for this.${NC}"
        exit 1
    fi
    echo "Detected shell: $shell"
}
ensure_repo_staged() {
    if ! grep -q "PATH_DEV_ENV" ~/."$shell"rc; then
        DEV_ENV_PATH="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"
        PATH_DEV_ENV="$DEV_ENV_PATH"
        echo "export PATH_DEV_ENV=\"$DEV_ENV_PATH\"" >>~/."$shell"rc
    else
        echo "PATH_DEV_ENV already set in your rc file."
    fi
    cd $PATH_DEV_ENV
    check_for_updates
}
check_for_changes() {
    if [ "$PERMS_DEV_ENV" == "full" ]; then
        if git status | grep -q "nothing to commit"; then
            echo "No changes, proceeding with update..."
        else
            echo -e "${YELLOW}There are changes to your configs, would you like to commit/push these changes to vc? (Y/n)${NC}"
            read resp
            if [[ ! $resp =~ ^[Yy]$ ]]; then
                echo -e "${YELLOW}Skipping commit/push of changes.${NC}"
            else
                git add .
                git commit -m "New updates to configs" 2>/dev/null
                git push 2>/dev/null
            fi
        fi
    fi
}
renew_nvim_config() {
    if [ -d ~/.config/nvim ]; then
        rm -rf ~/.config/nvim
    fi
    mkdir -p ~/.config
    cp -r "$PATH_DEV_ENV/config/nvim" ~/.config/
    echo -e "${GREEN}nvim config renewed.${NC}"
    # Set up Omarchy hook for theme syncing
    HOOKS_DIR="$HOME/.config/omarchy/hooks"
    if [ -d "$HOOKS_DIR" ]; then
        if [ ! -f "$HOOKS_DIR/theme-set" ]; then
            echo "Creating theme-set hook for Omarchy..."
            cp "$HOOKS_DIR/theme-set.sample" "$HOOKS_DIR/theme-set"
            sudo echo "ln -sf \"\$HOME/.config/omarchy/current/theme/neovim.lua\" \"\$HOME/.config/nvim/lua/plugins/theme.lua\"" >>"$HOOKS_DIR/theme-set"
            echo -e "${GREEN}Omarchy theme-set hook created for nvim.${NC}"
        fi
    fi

}
renew_configs() {
    renew_nvim_config
}
update_configs() {
    detect_shell
    ensure_repo_staged
    check_for_changes
    renew_configs
}
add_alias() {
    detect_shell
    read -p "Enter alias name: " alias_name
    read -p "Enter command for alias '$alias_name': " alias_command
    echo "alias $alias_name='$alias_command'" >>"$HOME/.$(echo $shell)rc"
    echo "Alias '$alias_name' added to $HOME/.$(echo $shell)rc"
}
add_path() {
    detect_shell
    read -p "Enter the path to add to PATH: " new_path
    echo "export PATH=\"\$PATH:$new_path\"" >>"$HOME/.$(echo $shell)rc"
    echo "Path '$new_path' added to PATH in $HOME/.$(echo $shell)rc"
}
add_custom_line() {
    detect_shell
    echo "Make sure this is valid bash, it is just being appended to your rc file."
    read -p "Enter the custom line to add to your shell configuration: " custom_line
    echo "$custom_line" >>"$HOME/.$(echo $shell)rc"
    echo "Custom line added to $HOME/.$(echo $shell)rc"
}
edit_configs() {
    detect_shell
    ensure_repo_staged
    if [ -z "$EDITOR" ]; then
        EDITOR="vim"
    else
        $EDITOR "$PATH_DEV_ENV/config"
    fi
}
show_help() {
    echo "Usage: $0 command"
    echo "Commands:"
    echo "  update    Update the development environment configurations"
    echo "  help      Show this help message. CAN ALSO BE USED AS: '[command] help' for more info on a specific command"
    echo "  add       choose what to add to env (alias, PATH, custom line to .bashrc)"
}
if [ -z "$1" ] || [ "$1" == "update" ]; then
    update_configs
    exit 0
elif [ -z "$2" ]; then
    if [ "$1" == "help" ]; then
        show_help
        exit 0
    elif [ "$1" == "add" ]; then
        select choice in "Alias" "PATH" "Custom" "Exit"; do
            case $choice in
            Alias)
                add_alias
                break
                ;;
            PATH)
                add_path
                break
                ;;
            Custom)
                add_custom_line
                break
                ;;
            Exit)
                echo "Exiting..."
                ;;
            esac
        done
        exit 0
    elif [ "$1" == "edit" ]; then
        edit_configs
        exit 0
    fi
elif [ -z "$3" ]; then
    if [ "$1" == "help" ]; then
        if [ "$2" == "help" ]; then
            echo "$0 help hypr: Shows syntax to modify hyprland keybinds."
            echo "$0 help i3: Shows syntax to modify i3wm keybinds."
            echo "$0 help vim: Shows how to exit vim :)"
            exit 0
        elif [ "$2" == "hypr" ]; then
            echo "Find your config file. Likely in ~/.config/hypr/hyprland.conf"
            echo "  Unbind the existing keybind if it is already set using: unbind = SUPER, left"
            echo "  Set a new keybind using (example): bindd = SUPER, H, Move focus left, movefocus, l"
            exit 0
        elif [ "$2" == "i3" ]; then
            echo "Find your config file. Likely in ~/.config/i3/config"
            echo "  Set a new keybind using (example): bindsym $mod+H focus left"
            exit 0
        elif [ "$2" == "vim" ]; then
            echo "How to exit vim/nvim:"
            echo "  Wait holy shit I completely forgot..."
            exit 0
        fi
    elif [ "$1" == "add" ]; then
        if [ "$2" == "help" ]; then
            echo "Usage: $0 add [alias|path|custom]"
            echo "  alias  - Add a new alias to your shell configuration"
            echo "  path   - Add a new path to your PATH environment variable"
            echo "  custom - Add a custom line to your shell configuration"
            exit 0
        elif [ "$2" == "alias" ]; then
            add_alias
            exit 0
        elif [ "$2" == "path" ]; then
            add_path
            exit 0
        elif [ "$2" == "custom" ]; then
            add_custom_line
            exit 0
        fi
    elif [ "$1" == "edit" ]; then
        if [ "$2" == "help" ]; then
            echo "Open the configs for your dev-env in your editor."
            exit 0
        fi
    fi
fi
show_help
exit 1
